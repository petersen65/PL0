{
    "name": "PL/0",
    "patterns": [
        {
            "include": "#comments"
        },
        {
            "include": "#keywords"
        },
        {
            "include": "#constants"
        },
        {
            "include": "#numbers"
        },
        {
            "include": "#operators"
        },
        {
            "include": "#identifiers"
        },
        {
            "include": "#punctuation"
        }
    ],
    "repository": {
        "comments": {
            "patterns": [
                {
                    "name": "comment.line.double-slash.pl0",
                    "match": "//.*$"
                },
                {
                    "name": "comment.block.braces.pl0",
                    "begin": "\\{",
                    "end": "\\}",
                    "patterns": [
                        {
                            "include": "#comments"
                        }
                    ]
                },
                {
                    "name": "comment.block.parenthesis-asterisk.pl0",
                    "begin": "\\(\\*",
                    "end": "\\*\\)",
                    "patterns": [
                        {
                            "include": "#comments"
                        }
                    ]
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.control.pl0",
                    "match": "\\b(if|then|else|while|do|begin|end)\\b"
                },
                {
                    "name": "keyword.other.pl0",
                    "match": "\\b(call|odd)\\b"
                },
                {
                    "name": "storage.type.pl0",
                    "match": "\\b(const|var|procedure)\\b"
                }
            ]
        },
        "constants": {
            "patterns": [
                {
                    "name": "constant.language.pl0",
                    "match": "\\b(true|false|nil|null)\\b"
                }
            ]
        },
        "numbers": {
            "patterns": [
                {
                    "name": "constant.numeric.integer.pl0",
                    "match": "\\b[0-9]+\\b"
                },
                {
                    "name": "constant.numeric.signed.pl0",
                    "match": "[+-]\\s*\\b[0-9]+\\b"
                }
            ]
        },
        "operators": {
            "patterns": [
                {
                    "name": "keyword.operator.assignment.pl0",
                    "match": ":="
                },
                {
                    "name": "keyword.operator.comparison.pl0",
                    "match": "(<=|>=|#|=|<|>)"
                },
                {
                    "name": "keyword.operator.arithmetic.pl0",
                    "match": "[+\\-*/]"
                },
                {
                    "name": "keyword.operator.io.read.pl0",
                    "match": "\\?"
                },
                {
                    "name": "keyword.operator.io.write.pl0",
                    "match": "!"
                }
            ]
        },
        "identifiers": {
            "patterns": [
                {
                    "name": "entity.name.function.pl0",
                    "match": "(?<=procedure\\s+)\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
                },
                {
                    "name": "entity.name.function.call.pl0",
                    "match": "(?<=call\\s+)\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
                },
                {
                    "name": "variable.other.constant.pl0",
                    "match": "(?<=const\\s+)\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
                },
                {
                    "name": "variable.other.declaration.pl0",
                    "match": "(?<=var\\s+)\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
                },
                {
                    "name": "variable.other.pl0",
                    "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
                }
            ]
        },
        "punctuation": {
            "patterns": [
                {
                    "name": "punctuation.terminator.statement.pl0",
                    "match": ";"
                },
                {
                    "name": "punctuation.terminator.program.pl0",
                    "match": "\\."
                },
                {
                    "name": "punctuation.separator.pl0",
                    "match": ","
                },
                {
                    "name": "punctuation.parenthesis.pl0",
                    "match": "[()]"
                }
            ]
        }
    },
    "scopeName": "source.pl0"
}